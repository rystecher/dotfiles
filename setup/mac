#!/usr/bin/env bash

# Script to set up or update a Mac from scratch

# ----------------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------------

reset="\\e[0m"
red="\\e[0;31m"
green="\\e[0;32m"
yellow="\\e[0;33m"
cyan="\\e[0;36m"
white="\\e[0;37m"

fancy_echo() {
  local color=${2:-$cyan}
  local fmt="$color$1$reset"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

# Stop execution if a command errors
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

# ----------------------------------------------------------------------------
# Terminal
# ----------------------------------------------------------------------------

if [ ! -d "$HOME/.oh-my-zsh/" ]; then
  fancy_echo "Installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  fancy_echo "Installing Tmux Plugin Manager"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# ----------------------------------------------------------------------------
# Homebrew
# ----------------------------------------------------------------------------

if ! command -v brew >/dev/null; then
  # https://brew.sh/
  fancy_echo "Installing Homebrew ..."

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

# Install mise if not already installed
if ! command -v mise >/dev/null; then
  fancy_echo "Installing mise..."
  curl https://mise.run | sh
  export PATH="$HOME/.local/bin:$PATH"

  # Add mise to shell (if not already there)
  if ! grep -q 'mise activate' ~/.zshrc 2>/dev/null; then
    echo 'eval "$(mise activate zsh)"' >> ~/.zshrc
  fi
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file="$DIR/../Brewfile"

# ----------------------------------------------------------------------------
# Programming languages
# ----------------------------------------------------------------------------

fancy_echo "Installing programming languages from mise.toml..."
cd "$DIR/.."
mise install

# ----------------------------------------------------------------------------
# Dotfiles setup
# ----------------------------------------------------------------------------

fancy_echo "Initializing git submodules..."
cd "$DIR/.."
if [ -f .gitmodules ]; then
  git submodule update --init --recursive
fi

fancy_echo "Installing dotfiles..."
env RCRC="$HOME/dotfiles/rcrc" rcup

# ----------------------------------------------------------------------------
# Neovim setup
# ----------------------------------------------------------------------------

fancy_echo "Setting up Neovim..."

# Create necessary directories
mkdir -p "$HOME/.config"

# Install Neovim if not present
if ! command -v nvim >/dev/null; then
  fancy_echo "Installing Neovim via Homebrew..."
  brew install neovim
fi

# Note: Neovim config is now handled by rcup via config/nvim symlink

# ----------------------------------------------------------------------------
# System settings
# ----------------------------------------------------------------------------

if [ "$(defaults read com.apple.finder AppleShowAllFiles)" != "YES" ] ; then
  fancy_echo "Setting terminal to show all files"
  defaults write com.apple.finder AppleShowAllFiles YES
  killall Finder
fi

if [ "$(defaults read com.apple.desktopservices DSDontWriteNetworkStores)" != "1" ] ; then
  fancy_echo "Disabling storage of invisible files on network stores"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
fi

fancy_echo "Success!" "$green"

fancy_echo "Next steps:
  - Set GIT_NAME, GIT_EMAIL, HOME_EMAIL in .env in this folder
  - Fill in the following in ~/.gitconfig.local:
    [user]
      name =
      email =
  - Restart your shell or run: source ~/.zshrc
  - Open nvim to complete plugin installation
"
